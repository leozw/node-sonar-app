name: SonarQube

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'v16.20.2' 

    - name: Install dependencies
      run: npm install

    - name: Run tests with coverage
      run: npm run test

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Trigger Docker Build Workflow
      if: success() 
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPOSITORIES_TOKEN }}
        repository: leozw/node-sonar-app
        event-type: build-docker-image


    # - name: Login to DockerHub
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     push: true
    #     tags: leonardozwirtes/${{ env.IMAGE_NAME }}:latest

    # - name: Repository Dispatch
    #   uses: peter-evans/repository-dispatch@v1
    #   with:
    #     token: ${{ secrets.TOKEN_REPO_PYTHON }}
    #     repository: leozw/poc-opentelemetry-python/deploy-app
    #     event-type: new-image
    #     client-payload: '{"image": "leonardozwirtes/${{ env.IMAGE_NAME }}:v1.0.${{ github.run_number }}"}' 